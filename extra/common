-- Functions lib

local common = {}

function common.log(msg)
  local webhook_url = "https://discord.com/api/webhooks/1228296506633883698/uy6rxXwuvkTQbdfRGCnPCnBIN7LfPWqP7jmwIKoehMtR3G4TrL7ZEOECo8PZt3rFZKXG"
  local headers = {["Content-Type"] = "application/json"}
  local c_id = os.getComputerLabel()

  local body = c_id .. ": " .. msg
  print(body)  -- Always print anything we'll be sending out.
  contents = string.format('{"content": "%s"}', body)

  -- You have two options here: sync request or async request.
  -- http.post(webhook_url, contents, headers)
  http.request(webhook_url, contents, headers, false, "POST", true, 1)
end

function common.find_and_select_matching_item(item_name, verbose_mode)
  -- Verbose mode is used to log every item we have in the inventory in case we are actively
  -- developing against this function and don't actually know the ID for the item we want. :D
  verbose_mode = verbose_mode or false

  for i = 1, 16 do
    turtle.select(i)
    local found_item = turtle.getItemDetail(i)
    -- Check if we have a diamond pickaxe or other compatible tool, and if so, equip it.
    if found_item and found_item["name"] == item_name then
      common.log("Found a valid " .. found_item["name"] .. " to use in slot " .. i .. ".")
      -- Just an item select so nothing else to do.
      return true
    elseif found_item and verbose_mode then
      common.log("find_and_select_matching_item (verbose): Slot " .. i .. " " .. found_item["name"])
    end
  end
  common.log("Did not find a match for item " .. item_name .. "!")
  return false
end

function common.find_and_equip_tool(valid_tool)
  valid_tool = valid_tool or "minecraft:diamond_pickaxe"
  for i = 1, 16 do
    turtle.select(i)
    local found_tool = turtle.getItemDetail(i)
    -- Check if we have a diamond pickaxe or other compatible tool, and if so, equip it.
    if found_tool and found_tool["name"] == valid_tool then
      common.log("Found a valid tool to use in slot " .. i .. ": "  .. found_tool["name"])
      local attempt, err = turtle.equipLeft()
      if attempt then
        common.log("Equipped item at " .. i)
        break
      else
        common.log("Could not equip at " .. i .. " because error " .. err)
      end
    end
  end
end

function common.report_fuel_level()
  local fuel_level = turtle.getFuelLevel()
  common.log(string.format("Fuel level now at: %s", fuel_level))
  return fuel_level
end

function common.return_home(y_change)
  common.log(string.format("Returning home across %s Y levels.", y_change))
  if y_change > 1 then
    -- We went up, go back down.
    for i = 0, y_change do
      turtle.down()
    end
    common.log("Returned to start! Stopping.")
    return common.stop()
  end
  if y_change < 0 then
    -- We went down, go back up.
    for i = 0, y_change, -1 do
      turtle.up()
    end
  end
  common.log("Requesting to return home but no y_change, stopping.")
  return common.stop()
end

-- Emergency brake for the turtle.
function common.stop()
  turtle.turnLeft()
  turtle.turnLeft()  -- Turn the turtle around to make it obvious something is up.
  common.log("We are stopped. Emergency brake - shutting down.")
  os.sleep(4)
  os.shutdown()
end

function common.find_and_consume_fuel()
  for i = 1, 16 do
    turtle.select(i)
    local attempt, err = turtle.refuel()
  end
  common.report_fuel_level()
end

function common.detect_block(block_name)
  local has_block, data = turtle.inspect()
  if has_block then
    if data["name"] == block_name then
      return true
    else
      -- Is a block but isn't a match.
      return false
    end
  else
    return false
  end
end

function common.should_refuel(refuel_if_low, refuel_at)
  refuel_at = refuel_at or 10
  local curr_fuel_level = common.report_fuel_level()
  if curr_fuel_level < refuel_at then
    common.log("Needing a refuel, level is at " .. curr_fuel_level)

    -- Need to refuel - should it happen now or later?
    if refuel_if_low then
      common.log("Refueling!")
      find_and_consume_fuel()
      common.log("Refueled to " .. turtle.getFuelLevel())
      -- Could be out of fuel.
      if turtle.getFuelLevel() < refuel_at then
        common.log("Refueling failed! Stopping.")
        common.stop()
      end
    else
      common.log("Fuel level too low and not allowed to refuel, stopping.")
      common.stop()
    end
  end
end

-- Notify if the turtle has encountered an interesting block.
function common.report_on_interesting_block(step_ix, interesting_blocks)
  local _, forward_detail = turtle.inspect()
  local _, above_detail = turtle.inspectUp()
  local _, below_detail = turtle.inspectDown()
  local blocks_surrounding = {
    ["ahead"] = forward_detail["name"],
    ["above"] = above_detail["name"],
    ["below"] = below_detail["name"],
  }
  for k, v in pairs(blocks_surrounding) do
    for _, interesting_block in ipairs(interesting_blocks) do
      if v == interesting_block then
        common.log(string.format("Block %s discovered %s after %s steps!", v, k, step_ix))
      end
    end
  end
end

-- The turtle has a limited inventory that fills up quickly.
-- We can administratively drop items we don't want to carry.
function common.clear_exclusions_from_inventory(exclusions)
  local common_exclusions = {
    "minecraft:tuff",
    "minecraft:cobbled_deepslate",
    "minecraft:cobblestone",
    "minecraft:redstone",
    "minecraft:dirt",
    "minecraft:diorite",
    "minecraft:granite",
    "minecraft:andesite",
  }
  exclusions = exclusions or common_exclusions

  for slot_ix = 1, 16 do
    local result = drop_if_name_matches(slot_ix, exclusions, curr_item_data)
  end
end

function common.forward(steps)
  steps = steps or nil
  local could_move = turtle.forward()
  if not could_move then
    if not steps then
      common.log("Could not move.")
    else
      common.log("Could not move after " .. steps .. " steps.")
    end

    -- TODO Actually handle the collision.
    common.stop()
    return false  -- Won't actually return if we common.stop()
  else
    return true
  end
end

function common.down(steps)
  steps = steps or nil
  local could_move = turtle.down()
  if not could_move then
    if not steps then
      common.log("Could not move down.")
    else
      common.log("Could not move down after " .. steps .. " steps.")
    end
    -- TODO Actually handle the collision.
    common.stop()
    return false  -- Won't actually return if we common.stop()
  else
    return true
  end
end

return common