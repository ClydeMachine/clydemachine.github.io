-- Purpose of this script is for a CC Tweaked Minecraft Turtle to run through
-- a quarry and bring back all the interesting blocks. Whether they are interesting
-- is user-defined but essentially is aimed at the user defining the blocks
-- to ignore (leave as entities) and bring back everything else.

local global_step_width = 2

print("Beginning MC.")

-- Functions lib

function find_and_equip_tool()
  for i = 1, 16 do
    turtle.select(i)
    local attempt, err = turtle.equipLeft()
    if attempt then
      print("Equipped item at " .. i)
      break
    else
      print("Could not equip at " .. i .. " because error " .. err)
    end
  end
end

local refuelAt = 10

function find_and_consume_fuel()
  for i = 1, 16 do
    turtle.select(i)
    local attempt, err = turtle.refuel()
  end
end

function should_refuel(refuel_if_low)
  local curr_fuel_level = turtle.getFuelLevel()
  if curr_fuel_level < refuelAt then
    print("Need to refuel, level is at " .. curr_fuel_level)

    -- Need to refuel - should it happen now or later?
    if refuel_if_low then
      print("Refueling!")
      find_and_consume_fuel()
      print("Refueled to " .. turtle.getFuelLevel())
      -- Could be out of fuel.
      if turtle.getFuelLevel() < refuelAt then
        print("Refueling failed! Stopping.")
        stop()
      end
    else
      print("No need to refuel, already at " .. curr_fuel_level)
    end

  end
end

-- Classes

-- Class to keep track of where we are.
local Job = {}

function Job:new(job_definition)
  local instance = { job_definition = job_definition }
  setmetatable(instance, self)
  self.__index = self
  return instance
end

function Job:getJobDefinition()
  return self.job_definition
end

-- Emergency brake for the turtle.
function stop()
  turtle.turnLeft()
  turtle.turnLeft()  -- Turn the turtle around to make it obvious something is up.
  print("Emergency brake - shutting down in a few minutes.")
  os.sleep(120)
  os.shutdown()
end

function break_forward()
  turtle.dig("left") -- Always use left tool.
  turtle.digUp("left") -- Dig up so a human can follow along.
  turtle.suck()
  local is_blocked = turtle.detect()
  if is_blocked then
    print("We are blocked by something we couldn't break!")
    stop()
  end
  -- Not blocked - move forward.
  turtle.forward()
end

function break_down()
  turtle.digDown("left") -- Always use left tool.
  turtle.digUp("left") -- Dig up so a human can follow along.
  turtle.suckDown()
  local is_blocked = turtle.detectDown()
  if is_blocked then
    print("We are blocked by something we couldn't break!")
    stop()
  end
  -- Not blocked - move down.
  turtle.down()
end

-- Move in a square and clear blocks out. 3x3
function move_strategy_nascar(limit)
  -- step can be analogous to one Y level if you only go down once.
  for step = 1, limit do
    should_refuel(true)
    turtle.turnLeft()
    break_forward()
    break_forward()
    break_down()
  end
end

function move_strategy_large_steps(y_limit, step_width)
  -- step can be analogous to one Y level if you only go down once per step.
  for step = 1, y_limit do
    should_refuel(true)
    turtle.turnLeft()  -- Place down facing the wall, it turns left to work first step
    for leftward = 1, step_width do
      break_forward()
    end
    -- We are now at the end of a step, facing left of where we started.
    turtle.turnRight() -- Facing forward once again
    break_forward() -- Now standing over the next step.
    break_down() -- Break and step down for the rightward step start.
    turtle.turnRight() -- Face down the rightward step.
    for rightward = 1, step_width do
      break_forward()
    end
    -- We are now facing right of where we started.
    turtle.turnLeft()
    break_forward() -- Now over the next leftward step.
    break_down() -- Break and step down to the next leftward step.
    -- And we're ready to start the next.
  end
end

print("Beginning MC - main.")

-- Main loop goes here
-- https://claude.ai/chat/5a5ac357-24a1-43a0-9d65-79586b5a58f1
-- https://tweaked.cc/module/turtle.html#v:inspect

find_and_equip_tool()

-- move_strategy_nascar(32)
move_strategy_large_steps(1000, global_step_width)

print("Exiting MC.")
