-- Purpose of this script is for a CC Tweaked Minecraft Turtle to run through
-- a quarry and bring back all the interesting blocks. Whether they are interesting
-- is user-defined but essentially is aimed at the user defining the blocks
-- to ignore (leave as entities) and bring back everything else.

print("Beginning MC.")

-- Functions lib

function find_and_equip_tool()
  for i = 1, 16 do
    turtle.select(i)
    local attempt, err = turtle.equipLeft()
    if attempt then
      print("Equipped item at " .. i)
      break
    else
      print("Could not equip at " .. i .. " because error " .. err)
    end
  end
end

local refuelAt = 10

function should_refuel(should_refuel)
  local curr_fuel_level = turtle.getFuelLevel()
  if curr_fuel_level < refuelAt then
    print("Need to refuel, level is at " .. curr_fuel_level)

    -- Need to refuel - should it happen now or later?
    if should_refuel then
      print("Refueling!")
      local refuel_result, err = turtle.refuel()
      if refuel_result then
        print("Refueled to " .. turtle.getFuelLevel())
      else
        printError(err)
      end
    else
      print("No need to refuel, already at " .. curr_fuel_level)
    end

  end
end

-- Classes

-- Class to keep track of where we are.
local Job = {}

function Job:new(job_definition)
  local instance = { job_definition = job_definition }
  setmetatable(instance, self)
  self.__index = self
  return instance
end

function Job:getJobDefinition()
  return self.job_definition
end

-- Emergency brake for the turtle.
function stop()
  turtle.turnLeft()
  turtle.turnLeft()  -- Turn the turtle around to make it obvious something is up.
  print("Emergency brake - shutting down in a few minutes.")
  os.sleep(120)
  os.shutdown()
end

function break_forward()
  turtle.dig("left") -- Always use left tool.
  turtle.suck()
  local is_blocked = turtle.detect()
  if is_blocked then
    print("We are blocked by something we couldn't break!")
    stop()
  end
  -- Not blocked - move forward.
  turtle.forward()
end

function break_down()
  turtle.digDown("left") -- Always use left tool.
  turtle.suckDown()
  local is_blocked = turtle.detectDown()
  if is_blocked then
    print("We are blocked by something we couldn't break!")
    stop()
  end
  -- Not blocked - move down.
  turtle.down()
end

-- Move in a square and clear blocks out.
function move_strategy_nascar(limit)
  for step = 1, limit do
    turtle.turnLeft()
    break_forward()
    break_forward()
    break_down()
  end
end

print("Beginning MC - main.")

-- Main loop goes here
-- https://claude.ai/chat/5a5ac357-24a1-43a0-9d65-79586b5a58f1
-- https://tweaked.cc/module/turtle.html#v:inspect

find_and_equip_tool()

for iter = 1, 100 do
  should_refuel(true)
  move_strategy_nascar(16)
end
print("Exiting MC.")
