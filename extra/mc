-- Purpose of this script is for a CC Tweaked Minecraft Turtle to run through
-- a quarry and bring back all the interesting blocks. Whether they are interesting
-- is user-defined but essentially is aimed at the user defining the blocks
-- to ignore (leave as entities) and bring back everything else.

-- range(-56, -52) are the y-coords for diamonds apparently.
local global_step_width = 3
local global_distance_limit = 40
local global_should_refuel = false -- Set to true for a big run, false to collect coal!
local refuelAt = 10

local interesting_blocks = {
  "minecraft:diamond_ore",
  "minecraft:deepslate_diamond_ore",
  "minecraft:iron_ore",
  "minecraft:deepslate_iron_ore",
  "minecraft:gold_ore",
  "minecraft:deepslate_gold_ore",
  "minecraft:coal_ore",
}
local facing_original_direction = 0  -- This is to keep track of which way we are facing.

local common = require("common")

common.log("Beginning mc.")

function detect_gravel()
  local gravel_block_name = "minecraft:gravel"
  local has_block, data = turtle.inspect()
  if has_block then
    -- Could be gravel!
    if data["name"] == gravel_block_name then
      return true
    else
      -- Is a block but isn't gravel...?
      return false
    end
  else
    return false
  end
end

function handle_gravel()
  common.log("Checking if we are blocked by gravel...")
  -- if gravel, we basically just keep mining in place til it's gone.
  -- No stack of gravel naturally spawned will be more than 10 tall.
  for gravelstep = 1, 10 do
    os.sleep(1)  -- Wait a moment if gravel was falling.
    if detect_gravel() then
      turtle.dig("left")
      turtle.suck()
    else
      -- All clear!
      common.log("Possible gravel blockage resolved.")
      break
    end
  end
end

function break_forward()
  turtle.dig("left") -- Always use left tool.
  turtle.digUp("left") -- Dig up so a human can follow along.
  turtle.suck()
  local is_blocked = turtle.detect()
  if is_blocked then
    common.log("We are blocked by something!")
    handle_gravel()
    -- handle_bedrock()
  end
  -- Not blocked - move forward.
  turtle.forward()
end

function break_forward_up_and_down(step_ix)
  common.report_on_interesting_block(step_ix, interesting_blocks)
  turtle.dig("left") -- Always use left tool.
  turtle.digUp("left") -- Dig up so a human can follow along.
  turtle.digDown("left") -- Dig up so a human can follow along.
  turtle.suck()
  turtle.suckUp()
  turtle.suckDown()
  local is_blocked = turtle.detect()
  if is_blocked then
    common.log("We are blocked by something!")
    handle_gravel()
    -- handle_bedrock()
  end
  -- Not blocked - move forward.
  turtle.forward()
end

function break_down()
  turtle.digDown("left") -- Always use left tool.
  turtle.digUp("left") -- Dig up so a human can follow along.
  turtle.suckDown()
  local is_blocked = turtle.detectDown()
  if is_blocked then
    common.log("We are blocked by something!")
    handle_gravel()
    -- handle_bedrock()
  end
  -- Not blocked - move down.
  turtle.down()
end

-- Move in a square and clear blocks out. 3x3
function move_strategy_nascar(limit)
  -- step can be analogous to one Y level if you only go down once.
  for step = 1, limit do
    common.should_refuel(global_should_refuel)
    turtle.turnLeft()
    break_forward()
    break_forward()
    break_down()
  end
end

function move_strategy_large_steps(y_limit, step_width)
  -- step can be analogous to one Y level if you only go down once per step.
  for step = 1, y_limit do
    common.should_refuel(global_should_refuel)
    turtle.turnLeft()  -- Place down facing the wall, it turns left to work first step
    for leftward = 1, step_width do
      break_forward()
    end
    -- We are now at the end of a step, facing left of where we started.
    turtle.turnRight() -- Facing forward once again
    break_forward() -- Now standing over the next step.
    break_down() -- Break and step down for the rightward step start.
    turtle.turnRight() -- Face down the rightward step.
    for rightward = 1, step_width do
      break_forward()
    end
    -- We are now facing right of where we started.
    turtle.turnLeft()
    break_forward() -- Now over the next leftward step.
    break_down() -- Break and step down to the next leftward step.
    -- And we're ready to start the next.
  end
end

function move_strategy_three_up_wide(distance_limit, step_width)
  -- On the same y_level, strip mine wide and deep.
  local forward_change = 0
  for step = 1, distance_limit do
    common.log(string.format("On step %d/%d, moved %d blocks forward.", step, distance_limit, forward_change))
    common.should_refuel(global_should_refuel)
    common.clear_exclusions_from_inventory_when_low_space()
    turtle.turnLeft()  -- Place down facing the wall, it turns left to work first strip
    facing_original_direction = facing_original_direction - 1
    for leftward = 1, step_width do
      break_forward_up_and_down(step)
    end
    -- We are now at the end of a step, facing left of where we started.
    turtle.turnRight() -- Facing forward once again
    facing_original_direction = facing_original_direction + 1
    break_forward_up_and_down(step) -- Now standing over the next step.
    forward_change = forward_change += 1
    turtle.turnRight() -- Face down the rightward step.
    facing_original_direction = facing_original_direction + 1
    for rightward = 1, step_width do
      break_forward_up_and_down(step)
    end
    -- We are now facing right of where we started.
    turtle.turnLeft()
    facing_original_direction = facing_original_direction - 1
    break_forward_up_and_down(step) -- Now over the next leftward step.
    forward_change = forward_change + 1
    -- And we're ready to start the next.
  end
  -- Loop completed, return home.
  common.come_come(forward_change, facing_original_direction)
end

common.log("Beginning MC - main.")

-- Main loop goes here
-- https://claude.ai/chat/5a5ac357-24a1-43a0-9d65-79586b5a58f1
-- https://tweaked.cc/module/turtle.html#v:inspect

common.find_and_equip_tool()
common.find_and_consume_fuel()

-- move_strategy_nascar(32)
-- move_strategy_large_steps(1000, global_step_width)
move_strategy_three_up_wide(global_distance_limit, global_step_width)

common.log("Exiting mc.")
